#!/usr/bin/env bash
VERSION="0.1.0"

# A bunch of helper functions and variables!

if [ "$NO_COLOR" != "1" ]; then
    # ANSI Colors
    RCol='\e[0m'    # Text Reset

    # Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
    Bla='\e[0;30m';     BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m';   On_Bla='\e[40m';    On_IBla='\e[0;100m';
    Red='\e[0;31m';     BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m';   On_Red='\e[41m';    On_IRed='\e[0;101m';
    Gre='\e[0;32m';     BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m';   On_Gre='\e[42m';    On_IGre='\e[0;102m';
    Yel='\e[0;33m';     BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m';   On_Yel='\e[43m';    On_IYel='\e[0;103m';
    Blu='\e[0;34m';     BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m';   On_Blu='\e[44m';    On_IBlu='\e[0;104m';
    Pur='\e[0;35m';     BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m';   On_Pur='\e[45m';    On_IPur='\e[0;105m';
    Cya='\e[0;36m';     BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m';   On_Cya='\e[46m';    On_ICya='\e[0;106m';
    Whi='\e[0;37m';     BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m';   On_Whi='\e[47m';    On_IWhi='\e[0;107m';
fi

INDENT=0
INDENT_STRING="  "
indent() {
    INDENT=$((INDENT+1))
}
unindent() {
    INDENT=$((INDENT-1))
}

log_lines() {
    local level="$1"
    shift
    echo "$@" | while IFS= read -r line; do
        log "$level" "$line"
    done
}

log() {
    local level="$1"
    shift
    local message="$@"

    local color=""
    case "$level" in
        warn) color="${BIYel}";;
        error) color="${BIRed}";;
        info) color="${BIGre}";;
        trace) color="${BBla}";;
    esac

    local indentation=""
    if [ "$INDENT" -ne "0" ]; then
        for i in $(seq 0 $INDENT); do
            local indentation="$indentation$INDENT_STRING"
        done
    fi

    local format="${color}%-5s${RCol}: $indentation%s\n"
    if [ $level == "trace" ]; then
        format="${color}%-5s${RCol}: $indentation${color}%s${RCol}\n"
    fi

    if [ $level == "error" ]; then
        printf "$format" "$level" "$message" 1>&2
    else
        printf "$format" "$level" "$message"
    fi
}

# Echo to stderr
error() {
    log error $@
}

info() {
    log info $@
}

warn() {
    log warn $@
}

die() {
    error $@
    exit 1
}

tc_escape() {
    echo "$1" | sed "s/|/||/g" | sed "s/'/|'/g"
}

teamcity() {
    [ "$TEAMCITY" == "1" ] && echo "##teamcity[$1]"
}

verbose() {
    [ "$VERBOSE" == "1" ] && log trace $@
}

path_of() {
    local CMD=$1
    type $CMD | sed "s/$CMD is //g"
}

has() {
    type "$1" > /dev/null 2>&1
    return $?
}

requires() {
    if ! has $1; then
        die "Missing required command: $1"
    fi
}

usage() {
    echo -en "${Pur}help ${RCol}: ${BWhi}Chester${RCol} v$VERSION - Testing tool for shell scripts
${Pur}help ${RCol}: ${Cya}Usage${RCol}: ${BWhi}$0${RCol} [${Yel}<options>${RCol}][${Yel}<arguments>${RCol}...]
${Pur}help ${RCol}:
${Pur}help ${RCol}: Recurses through files and directories found in the ${Yel}<arguments>${RCol} list and runs executable files as tests.
${Pur}help ${RCol}:
${Pur}help ${RCol}: Chester is short for Shell Tester. Just roll with it.
${Pur}help ${RCol}:
${Pur}help ${RCol}: ${Cya}Options:${RCol}
"

    FORMAT="${Pur}help ${RCol}:  ${Yel}%-20b${RCol} %b\n"
    printf "$FORMAT" "-h" "Print this help message"
    printf "$FORMAT" "-t" "Report status using TeamCity-style status messages"
    printf "$FORMAT" "-v" "Report status using TeamCity-style status messages"
    printf "$FORMAT" "-s <shell>" "Run the tests in ${Yel}<shell>${RCol}, defaults to '/bin/sh'"
    printf "$FORMAT" "-n <name>" "When writing TeamCity status message, use <name> as the outer-most test suite name"
}

# Main entry point (after argument parsing)
run_chester() {
    local testpaths="$1"

    # Recurse through each argument item
    for testpath in $testpaths; do
        run_test $testpath
    done
}

run_test() {
    local testpath="$1"

    # What kind of thing is testpath?
    if [ -f "$testpath" ]; then
        run_test_file "$testpath"
    elif [ -d "$testpath" ]; then
        run_test_dir "$testpath"
    else
        warn "Unknown test path: $testpath"
    fi
}

join_array() {
    local IFS="$1"; shift; echo "$*";
}

run_test_file() {
    local testfile="$1"

    local test_name=$(echo "$testfile" | sed s/\.sh//g)
    local full_test_name="$(join_array "/" ${DIR_STACK[*]})/$test_name"
    local tc_test_name=$(tc_escape "$test_name")

    if [ ! -f "$testfile" ] || [ ! -x "$testfile" ]; then
        warn "? $test_name"
        teamcity "testIgnored name='$tc_test_name' message='file is not executable'"
        return
    fi

    teamcity "testStarted name='$tc_test_name' captureStandardOutput='true'"
    
    for dir in "${DIR_STACK[@]}"; do
        run_infra_script "$dir/before.sh"
    done

    out=$("$TEST_SHELL" "$testfile" 2>&1)
    exit_code="$?"
    if [ "$exit_code" -eq "0" ]; then
        SUCCEEDED+=("$full_test_name")

        info "✓ $test_name"
        if [ "$VERBOSE" == "1" ]; then
            indent
            log_lines "trace" "$out"
            unindent
        fi
    else
        FAILED+=("$full_test_name")

        error "✗ $test_name"
        indent
        log_lines error "$out"
        unindent

        teamcity "testFailed name='$tc_test_name'"
    fi

    for dir in "${DIR_STACK[@]}"; do
        run_infra_script "$dir/after.sh"
    done

    teamcity "testFinished name='$tc_test_name'"
}

is_test() {
    local testpath="$1"

    if [ "$testpath" == "before.sh" ] || [ "$testpath" == "before_all.sh" ] || [ "$testpath" == "after.sh" ] || [ "$testpath" == "after_all.sh" ]; then
        return 1
    fi
}

run_infra_script() {
    if [ -f "$1" ] && [ -x "$1" ]; then
        out=$("$1" 2>&1)
        if [ $? -ne "0" ]; then
            error "failed to run $(pwd)/$1"

            indent
            log_lines error "$out"
            unindent

            exit 1
        fi
    fi
}

declare -a DIR_STACK
DIR_STACK_POINTER=0
run_test_dir() {
    local testdir="$1"

    teamcity "testSuiteStarted name='$testdir'"

    info "$testdir/"
    
    # Push this dir onto the dir stack
    DIR_STACK[DIR_STACK_POINTER]="$1"
    DIR_STACK_POINTER=$((DIR_STACK_POINTER+1))

    # Enter dir
    pushd "$testdir" >/dev/null 2>&1
    indent
    
    # Run before_all for the dir
    run_infra_script "./before_all.sh"

    for testpath in *; do
        if is_test $testpath; then
            run_test "$testpath"
        fi
    done
    
    # Run after_all for the dir
    run_infra_script "./after_all.sh"

    unindent
    popd >/dev/null 2>&1

    teamcity "testSuiteFinished name='$testdir'"

    # Pop this value off the dir stack
    DIR_STACK_POINTER=$((DIR_STACK_POINTER-1))
    unset DIR_STACK[DIR_STACK_POINTER]
}

# Parse arguments
while getopts tvs:hpn: opt; do
    case $opt in
        h)      usage; exit 0;;
        t)      TEAMCITY=1;;
        v)      VERBOSE=1;;
        s)      TEST_SHELL="$OPTARG";;
        p)      REPORT=1;;
        n)      SUITE_NAME="$OPTARG";;
        [?])    usage;;
    esac
done

# Shift out named arguments that were parsed by getopts
shift $((OPTIND-1))

FAILED=()
SUCCEEDED=()
DIRS="$@"
if [ -z "$DIRS" ]; then
    error "No test directories specified"
    usage
    exit 1
fi

[ -z "$TEAMCITY" ]      && TEAMCITY=0
[ -z "$VERBOSE" ]       && VERBOSE=0
[ -z "$REPORT" ]        && REPORT=0
[ -z "$TEST_SHELL" ]    && TEST_SHELL="/bin/sh"

[ ! -z "$SUITE_NAME" ] && teamcity "testSuiteStarted name='$SUITE_NAME'"
run_chester "$DIRS"
[ ! -z "$SUITE_NAME" ] && teamcity "testSuiteFinished name='$SUITE_NAME'"

if [ "$REPORT" -eq "1" ]; then
    info "=== Test Results ==="
    fmt="%b : %s\n";
    for ((i = 0; i < ${#SUCCEEDED[@]}; i++)); do
        testname="${SUCCEEDED[$i]}"
        printf "$fmt" "${BGre}pass${RCol}" "$testname"
    done
    for ((i = 0; i < ${#FAILED[@]}; i++)); do
        testname="${FAILED[$i]}"
        printf "$fmt" "${BRed}fail${RCol}" "$testname"
    done
fi

exit "${#FAILED[@]}"